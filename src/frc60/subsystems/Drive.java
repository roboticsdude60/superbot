// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc60.subsystems;

import frc60.Robot;
import frc60.RobotMap;
import frc60.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.smartdashboard.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Preferences;


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftBack = RobotMap.driveleftBack;
    private final CANTalon rightBack = RobotMap.driverightBack;
    private final RobotDrive robotDrive2 = RobotMap.driveRobotDrive2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean isMagicked = false;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void driveFromJoystick() {
    	setRegMode();
    	robotDrive2.arcadeDrive(-1*Robot.oi.driveJoystick.getY(), -1*Robot.oi.driveJoystick.getZ());
    	SmartDashboard.putNumber("LeftV", leftBack.getOutputVoltage());
    	SmartDashboard.putNumber("LeftPos", leftBack.getPosition());
    	SmartDashboard.putNumber("RightV", rightBack.getOutputVoltage() );
    	SmartDashboard.putNumber("RightPos", rightBack.getPosition());
    }
    public void driveAngle(double forward,double angle) {
    	setRegMode();
    	robotDrive2.arcadeDrive(forward, Robot.navx.getFusedHeading()-angle);
    }
    public void stop() {
    	robotDrive2.stopMotor();
    }
    
    public void zeroPosition() {
    	leftBack.setPosition(0);
    	rightBack.setPosition(0);
    }
    
    
    public boolean isDoneWithMagic() {
    	return isLeftDone() && isRightDone();
    }
    private boolean isLeftDone() {
    	return (Math.abs( leftBack.getPosition()-leftTarget) < 0.02) && (Math.abs(leftBack.getEncVelocity())<10);
    }
    private boolean isRightDone() {
    	return Math.abs(rightBack.getPosition()-rightTarget) < 0.02 && (Math.abs(rightBack.getEncVelocity())<10);
    }
    private double leftTarget,rightTarget;
    public void magicSetRev(double leftRev,double rightRev) {
    	setMagicMode();
    	magicSetLeftRev(leftRev);
    	magicSetRightRev(rightRev);
    	leftTarget = leftRev;
    	rightTarget = rightRev;
    }
    private void magicSetLeftRev(double rev) {
    	leftBack.set(rev);
    	SmartDashboard.putNumber("LeftV", leftBack.getOutputVoltage());
    	SmartDashboard.putNumber("LeftPos", leftBack.getPosition());
    }
    private void magicSetRightRev(double rev) {
    	rightBack.set(rev);
    	SmartDashboard.putNumber("RightV", rightBack.getOutputVoltage() );
    	SmartDashboard.putNumber("RightPos", rightBack.getPosition());
    }
    public void initPIDF() {

    	double p = Robot.preferences.getDouble("DriveP", 6.0);
    	double i = Robot.preferences.getDouble("DriveI", 0.0);
    	double d = Robot.preferences.getDouble("DriveD", 3.0);		
    	double f = Robot.preferences.getDouble("DriveF", 0.65);
    
    	leftBack.setF(f);
    	rightBack.setF(f);
    	
    	leftBack.setP(p);
    	rightBack.setP(p);
    	leftBack.setI(i);
    	rightBack.setI(i);
    	leftBack.setD(d);
    	rightBack.setD(d);
    	System.out.println("PIDF" + p + "," + i + "," + d + "," + f);
    }
    public void initCruiseAndAceleration() {
    	double cruiseVel = Robot.preferences.getDouble("DriveCruiseVelocity", 300);
    	double acceleration = Robot.preferences.getDouble("DriveAcceleration", 300);
    	leftBack.setMotionMagicCruiseVelocity(cruiseVel);//RPM
    	rightBack.setMotionMagicCruiseVelocity(cruiseVel);//RPM
    	leftBack.setMotionMagicAcceleration(acceleration);//RPM per second
    	rightBack.setMotionMagicAcceleration(acceleration);
    	System.out.println("CRUISE,ACCEL" + cruiseVel + "," + acceleration);
    }
    private void setMagicMode() {
    	if (!isMagicked) {
    		leftBack.changeControlMode(TalonControlMode.MotionMagic);
    		rightBack.changeControlMode(TalonControlMode.MotionMagic);
    		isMagicked = true;
    	}
    	
    }
    private void setRegMode() {
    	leftBack.changeControlMode(TalonControlMode.PercentVbus);
    	rightBack.changeControlMode(TalonControlMode.PercentVbus);
    	isMagicked = false;
    }


    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new DriveFromJoystick());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

