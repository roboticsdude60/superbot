// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc60.subsystems;

import frc60.Robot;
import frc60.RobotMap;
import frc60.commands.*;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.SerialPort.Port;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class GearCam extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	SerialPort pixy;
	boolean isWaiting = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public void initPort() {
		if ( Robot.preferences.getBoolean("GearPixyPortOne", true) ) {
			pixy = new SerialPort(115200, Port.kUSB1);
			System.out.println("GearPixy init at kUSB1");
		}
		else if ( Robot.preferences.getBoolean("GearPixyPortTwo", false) ) {
			pixy = new SerialPort(115200, Port.kUSB2);
			System.out.println("GearPixy init at kUSB2");
		}else {
			System.out.println("Error, gear pixy does not have a port");
		}
	}
	
	String message;
	String[] parts;
	
	//must be initialized before calling this
	public void update() {
		if (pixy.getBytesReceived() >= 18) {
			read();
			parseMessage();
		}
		if (!isWaiting) {
			requestMessage();
		}
	}
	
	
	private void read() {
		message = pixy.readString();
		isWaiting = false;
		//for debug only
		System.out.println(message);
	}
	private void parseMessage() {
		try {
			parts = message.split(",");
		}catch (Exception e) {
			System.out.println("Err parsing pixy message");
			parts = new String[]{"0","000","00","000","00"};
		}
	}
	private void requestMessage() {
		try {
			pixy.writeString("R");
			isWaiting = true;
		}catch (Exception e) {
			System.out.println("Err requesting message");
		}
		
	}
	
	
	public int getStatus() {
		try {
			return Integer.parseInt( parts[0] );
		}catch (Exception e) {
			System.out.println("Err parsing status");
			return -1;
		}
	}
	
	
	
	

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

