// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc60;

import frc60.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import frc60.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton intakeButton;
    public Joystick driveJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driveJoystick = new Joystick(0);
        
        intakeButton = new JoystickButton(driveJoystick, 1);
        intakeButton.whileHeld(new IntakeFuel());


        // SmartDashboard Buttons
        SmartDashboard.putData("AutoLeft", new AutoLeft());
        SmartDashboard.putData("AutoRight", new AutoRight());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveFromJoystick", new DriveFromJoystick());
        SmartDashboard.putData("IntakeFuel", new IntakeFuel());
        SmartDashboard.putData("TestMagic", new TestMagic());
        SmartDashboard.putData("DriveXInches: DefaultDistance", new DriveXInches(12));
        SmartDashboard.putData("UpdateGearCamInfo", new UpdateGearCamInfo());
        SmartDashboard.putData("UpdateGyro", new UpdateGyro());
        SmartDashboard.putData("TurnTheta: leftPegAngle", new TurnTheta(30));
        SmartDashboard.putData("TurnTheta: rightPegAngle", new TurnTheta(330));
        SmartDashboard.putData("Stir", new Stir());
        SmartDashboard.putData("ClampGear", new ClampGear());
        SmartDashboard.putData("UnclampGear", new UnclampGear());
        SmartDashboard.putData("GearUp", new GearUp());
        SmartDashboard.putData("GearDown", new GearDown());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveJoystick() {
        return driveJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

