// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc60.superbot.subsystems;

import org.usfirst.frc60.superbot.RobotMap;
import org.usfirst.frc60.superbot.commands.*;

import edu.wpi.first.wpilibj.command.Subsystem;

import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class GearCamera extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	private SerialPort pixy;

	private String message;
	private String[] part;
	private boolean waitingForMessage = false;
	private int x,y,width,height;
	private double angle;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new UpdateGearCamInfo());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void initPort() {
		pixy = new SerialPort(115200, SerialPort.Port.kUSB1);
	}

	public void update() {
		if ( messageReady() ) {
			readNextMessage();
			parseMessage();
		}
		if (pixy.getBytesReceived() < 2) {
			requestMessage();
		}
		System.out.println(message);
	}
	
	public boolean isGoodRead() {
		//TODO
		return false;
	}
	public int getX() {
		return x;
	}
	public int getY() {
		return y;
	}
	public int getWidth() {
		return width;
	}
	public int getHeight() {
		return height;
	}
	public double getAngle() {
		//TODO
		return 0.0;
	}
	

	private boolean messageReady() {
		return pixy.getBytesReceived() >= 18;
	}
	private void readNextMessage() {
		message = pixy.readString();
		waitingForMessage = false;
		System.out.println(message);
	}
	private void requestMessage() {
		pixy.writeString("R");
		waitingForMessage = true;
	}
	private void parseMessage() {
		//just a simple sanity check
		if  (message.endsWith("\n") ) {
			part = message.split(",");			
			try {
				x = Integer.parseInt( part[1] );
				y = Integer.parseInt( part[2] );
				width = Integer.parseInt( part[3] );
				height = Integer.parseInt( part[4] );
			}catch (NumberFormatException e) {
				
			}
		}
	}
}
