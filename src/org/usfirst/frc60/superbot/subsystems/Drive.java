// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc60.superbot.subsystems;

import org.usfirst.frc60.superbot.Robot;
import org.usfirst.frc60.superbot.RobotMap;
import org.usfirst.frc60.superbot.commands.*;
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftFront = RobotMap.driveLeftFront;
    private final CANTalon leftBack = RobotMap.driveLeftBack;
    private final CANTalon rightFront = RobotMap.driveRightFront;
    private final CANTalon rightBack = RobotMap.driveRightBack;
    private final RobotDrive robotDrive4 = RobotMap.driveRobotDrive4;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final double wheelDiameter = 8.0;
    private double countsPerInch = 4096 / (Math.PI * wheelDiameter);
    
    private double lastAvgEncoderCount = 0;
    private double avgCounts = 0;
    private int leftCounts = 0;
    private int rightCounts = 0;
    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveFromJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void drivefromjoystick() {
    	robotDrive4.arcadeDrive( -1 * Robot.oi.driveJoystick.getY(), -1 * Robot.oi.driveJoystick.getZ() );
    }
    
    public void stop() {
    	robotDrive4.stopMotor();
    }
    
    public double getDistanceTraveled() {
    	leftCounts = leftFront.getEncPosition();
    	rightCounts = rightFront.getEncPosition();
    	avgCounts =  ( (leftCounts + rightCounts) / 2 ) - lastAvgEncoderCount;
    	lastAvgEncoderCount = (leftCounts + rightCounts ) /2;
    	return avgCounts * countsPerInch;
    	
    }
    
    public void turn(double turn) {
    	robotDrive4.arcadeDrive(0.0, turn);
    }
    
 // TalonControlMode includes:
//    public enum TalonControlMode implements CANSpeedController.ControlMode {
//        PercentVbus(0), Position(1), Speed(2), Current(3), Voltage(4), Follower(5), MotionProfile(6), Disabled(15);
}

